[{"C:\\shivs\\MICROSOFT-ENGAGE-SCHEDULER\\frontend\\src\\index.js":"1","C:\\shivs\\MICROSOFT-ENGAGE-SCHEDULER\\frontend\\src\\components\\Register.js":"2","C:\\shivs\\MICROSOFT-ENGAGE-SCHEDULER\\frontend\\src\\components\\Signin.js":"3","C:\\shivs\\MICROSOFT-ENGAGE-SCHEDULER\\frontend\\src\\components\\Booking.js":"4","C:\\shivs\\MICROSOFT-ENGAGE-SCHEDULER\\frontend\\src\\components\\Calender.js":"5","C:\\shivs\\MICROSOFT-ENGAGE-SCHEDULER\\frontend\\src\\views\\Index.js":"6","C:\\shivs\\MICROSOFT-ENGAGE-SCHEDULER\\frontend\\src\\store.js":"7","C:\\shivs\\MICROSOFT-ENGAGE-SCHEDULER\\frontend\\src\\components\\GetDetailsOfSlot.js":"8","C:\\shivs\\MICROSOFT-ENGAGE-SCHEDULER\\frontend\\src\\components\\NumOfSlotSetting.js":"9","C:\\shivs\\MICROSOFT-ENGAGE-SCHEDULER\\frontend\\src\\components\\Navbars\\IndexNavbar.js":"10","C:\\shivs\\MICROSOFT-ENGAGE-SCHEDULER\\frontend\\src\\components\\DateCard.js":"11","C:\\shivs\\MICROSOFT-ENGAGE-SCHEDULER\\frontend\\src\\actions\\slotActions.js":"12","C:\\shivs\\MICROSOFT-ENGAGE-SCHEDULER\\frontend\\src\\actions\\userActions.js":"13","C:\\shivs\\MICROSOFT-ENGAGE-SCHEDULER\\frontend\\src\\components\\Footer\\Footer.js":"14","C:\\shivs\\MICROSOFT-ENGAGE-SCHEDULER\\frontend\\src\\reducers\\userReducers.js":"15","C:\\shivs\\MICROSOFT-ENGAGE-SCHEDULER\\frontend\\src\\reducers\\slotReducers.js":"16","C:\\shivs\\MICROSOFT-ENGAGE-SCHEDULER\\frontend\\src\\components\\ListOfStudents.js":"17","C:\\shivs\\MICROSOFT-ENGAGE-SCHEDULER\\frontend\\src\\constants.js":"18","C:\\shivs\\MICROSOFT-ENGAGE-SCHEDULER\\frontend\\src\\components\\PageHeader\\PageHeader.js":"19","C:\\shivs\\MICROSOFT-ENGAGE-SCHEDULER\\frontend\\src\\firebase\\index.js":"20"},{"size":1397,"mtime":1637064161651,"results":"21","hashOfConfig":"22"},{"size":6946,"mtime":1637063225298,"results":"23","hashOfConfig":"22"},{"size":6048,"mtime":1637063230422,"results":"24","hashOfConfig":"22"},{"size":3969,"mtime":1637063426619,"results":"25","hashOfConfig":"22"},{"size":5006,"mtime":1637035185791,"results":"26","hashOfConfig":"22"},{"size":611,"mtime":1637064101661,"results":"27","hashOfConfig":"22"},{"size":1009,"mtime":1637052271887,"results":"28","hashOfConfig":"22"},{"size":2768,"mtime":1636966668716,"results":"29","hashOfConfig":"22"},{"size":4031,"mtime":1637063860669,"results":"30","hashOfConfig":"22"},{"size":7452,"mtime":1636966997823,"results":"31","hashOfConfig":"22"},{"size":2402,"mtime":1637063355976,"results":"32","hashOfConfig":"22"},{"size":4625,"mtime":1637052093770,"results":"33","hashOfConfig":"22"},{"size":3508,"mtime":1636808073086,"results":"34","hashOfConfig":"22"},{"size":553,"mtime":1636619160870,"results":"35","hashOfConfig":"22"},{"size":2332,"mtime":1636807642431,"results":"36","hashOfConfig":"22"},{"size":2554,"mtime":1637052189758,"results":"37","hashOfConfig":"22"},{"size":957,"mtime":1636966601536,"results":"38","hashOfConfig":"22"},{"size":1892,"mtime":1637052142049,"results":"39","hashOfConfig":"22"},{"size":949,"mtime":1636617046322,"results":"40","hashOfConfig":"22"},{"size":554,"mtime":1636788636721,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"s3ouq8",{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\shivs\\MICROSOFT-ENGAGE-SCHEDULER\\frontend\\src\\index.js",[],"C:\\shivs\\MICROSOFT-ENGAGE-SCHEDULER\\frontend\\src\\components\\Register.js",["91","92","93","94"],"import React, { useState, useEffect } from 'react';\r\nimport classnames from 'classnames';\r\nimport { Link } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { registerUser } from '../actions/userActions';\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  CardFooter,\r\n  CardImg,\r\n  CardTitle,\r\n  Label,\r\n  FormGroup,\r\n  Form,\r\n  Input,\r\n  InputGroupAddon,\r\n  InputGroupText,\r\n  InputGroup,\r\n  Container,\r\n  Row,\r\n  Col,\r\n} from 'reactstrap';\r\nimport IndexNavbar from 'components/Navbars/IndexNavbar.js';\r\nimport Footer from 'components/Footer/Footer.js';\r\n\r\nexport default function Signup({ location, history }) {\r\n  React.useEffect(() => {\r\n    document.body.classList.toggle('index-page');\r\n    return function cleanup() {\r\n      document.body.classList.toggle('index-page');\r\n    };\r\n  }, []);\r\n  const [fullNameFocus, setFullNameFocus] = React.useState(false);\r\n  const [emailFocus, setEmailFocus] = React.useState(false);\r\n  const [passwordFocus, setPasswordFocus] = React.useState(false);\r\n\r\n  const [name, setName] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const userRegister = useSelector((state) => state.userRegister);\r\n  const { loading, userInfo, error } = userRegister;\r\n\r\n  const redirect = location.search ? location.search.split('=')[1] : '/';\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    dispatch(registerUser(name, email, password));\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (userInfo) {\r\n      history.push(redirect);\r\n    }\r\n  }, [history, userInfo, redirect]);\r\n\r\n  return (\r\n    <>\r\n      <IndexNavbar />\r\n      <div className='wrapper'>\r\n        <div className='main'>\r\n          <div className='section section-signup'>\r\n            <Container>\r\n              <div className='squares square-1' />\r\n              <div className='squares square-2' />\r\n              <div className='squares square-3' />\r\n              <div className='squares square-4' />\r\n              <Row className='row-grid justify-content-between align-items-center'>\r\n                <Col lg='6'>\r\n                  <h3 className='display-3 text-white'>\r\n                    Hybrid Scheduler <span className='text-white'></span>\r\n                  </h3>\r\n                  <p className='text-white mb-3'>\r\n                    Hybrid classes work in such a manner that half-strength\r\n                    would attend college/school and the same lecture would\r\n                    simultaneously be made available online for those attending\r\n                    lecture from their respective homes.\r\n                  </p>\r\n                  <div className='btn-wrapper'>\r\n                    <Link to='/login'>\r\n                      <Button color='primary'>Go to Login Signup Page</Button>\r\n                    </Link>\r\n                  </div>\r\n                </Col>\r\n                <Col className='mb-lg-auto' lg='6'>\r\n                  <Card className='card-register'>\r\n                    <CardHeader>\r\n                      <CardImg\r\n                        alt='...'\r\n                        src={require('assets/img/square-purple-1.png').default}\r\n                      />\r\n                      <CardTitle tag='p' style={{ marginLeft: '3px' }}>\r\n                        Register\r\n                      </CardTitle>\r\n                    </CardHeader>\r\n                    <CardBody>\r\n                      <Form className='form'>\r\n                        <InputGroup\r\n                          className={classnames({\r\n                            'input-group-focus': fullNameFocus,\r\n                          })}\r\n                        >\r\n                          <InputGroupAddon addonType='prepend'>\r\n                            <InputGroupText>\r\n                              <i className='tim-icons icon-single-02' />\r\n                            </InputGroupText>\r\n                          </InputGroupAddon>\r\n                          <Input\r\n                            placeholder='Full Name'\r\n                            type='text'\r\n                            onFocus={(e) => setFullNameFocus(true)}\r\n                            onBlur={(e) => setFullNameFocus(false)}\r\n                            value={name}\r\n                            onChange={(e) => setName(e.target.value)}\r\n                          />\r\n                        </InputGroup>\r\n                        <InputGroup\r\n                          className={classnames({\r\n                            'input-group-focus': emailFocus,\r\n                          })}\r\n                        >\r\n                          <InputGroupAddon addonType='prepend'>\r\n                            <InputGroupText>\r\n                              <i className='tim-icons icon-email-85' />\r\n                            </InputGroupText>\r\n                          </InputGroupAddon>\r\n                          <Input\r\n                            placeholder='Email'\r\n                            type='text'\r\n                            onFocus={(e) => setEmailFocus(true)}\r\n                            onBlur={(e) => setEmailFocus(false)}\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                          />\r\n                        </InputGroup>\r\n                        <InputGroup\r\n                          className={classnames({\r\n                            'input-group-focus': passwordFocus,\r\n                          })}\r\n                        >\r\n                          <InputGroupAddon addonType='prepend'>\r\n                            <InputGroupText>\r\n                              <i className='tim-icons icon-lock-circle' />\r\n                            </InputGroupText>\r\n                          </InputGroupAddon>\r\n                          <Input\r\n                            placeholder='Password'\r\n                            type='text'\r\n                            onFocus={(e) => setPasswordFocus(true)}\r\n                            onBlur={(e) => setPasswordFocus(false)}\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                          />\r\n                        </InputGroup>\r\n                      </Form>\r\n                    </CardBody>\r\n                    <CardFooter>\r\n                      <Button\r\n                        onClick={submitHandler}\r\n                        className='btn-round'\r\n                        color='primary'\r\n                        size='lg'\r\n                      >\r\n                        Register\r\n                      </Button>\r\n                    </CardFooter>\r\n                  </Card>\r\n                </Col>\r\n              </Row>\r\n            </Container>\r\n          </div>\r\n          );\r\n        </div>\r\n        <Footer />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","C:\\shivs\\MICROSOFT-ENGAGE-SCHEDULER\\frontend\\src\\components\\Signin.js",["95","96","97","98","99","100"],"import React, { useState, useEffect } from 'react';\r\nimport classnames from 'classnames';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { loginUser } from '../actions/userActions';\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  CardFooter,\r\n  CardImg,\r\n  CardTitle,\r\n  Label,\r\n  FormGroup,\r\n  Form,\r\n  Input,\r\n  InputGroupAddon,\r\n  InputGroupText,\r\n  InputGroup,\r\n  Container,\r\n  Row,\r\n  Col,\r\n} from 'reactstrap';\r\nimport IndexNavbar from 'components/Navbars/IndexNavbar.js';\r\nimport Footer from 'components/Footer/Footer.js';\r\n\r\nconst Signin = ({ location, history }) => {\r\n  React.useEffect(() => {\r\n    document.body.classList.toggle('index-page');\r\n    return function cleanup() {\r\n      document.body.classList.toggle('index-page');\r\n    };\r\n  }, []);\r\n  const [fullNameFocus, setFullNameFocus] = React.useState(false);\r\n  const [emailFocus, setEmailFocus] = React.useState(false);\r\n  const [passwordFocus, setPasswordFocus] = React.useState(false);\r\n\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n  const dispatch = useDispatch();\r\n  const userLogin = useSelector((state) => state.userLogin);\r\n  const { loading, userInfo, error } = userLogin;\r\n\r\n  const redirect = location.search ? location.search.split('=')[1] : '/';\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    dispatch(loginUser(email, password));\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (userInfo) {\r\n      history.push(redirect);\r\n    }\r\n  }, [history, userInfo, redirect]);\r\n\r\n  return (\r\n    <>\r\n      <IndexNavbar />\r\n      <div className='wrapper'>\r\n        <div className='main'>\r\n          <div className='section section-signup'>\r\n            <Container>\r\n              <div className='squares square-1' />\r\n              <div className='squares square-2' />\r\n              <div className='squares square-3' />\r\n              <div className='squares square-4' />\r\n              <Row className='row-grid justify-content-between align-items-center'>\r\n                <Col className='mb-lg-auto' lg='6'>\r\n                  <Card className='card-register'>\r\n                    <CardHeader>\r\n                      <CardImg\r\n                        alt='...'\r\n                        src={require('assets/img/square-purple-1.png').default}\r\n                      />\r\n                      <CardTitle\r\n                        tag='h3'\r\n                        style={{ marginLeft: '31px', marginTop: '11px' }}\r\n                      >\r\n                        Login\r\n                      </CardTitle>\r\n                    </CardHeader>\r\n                    <CardBody>\r\n                      <Form className='form'>\r\n                        <InputGroup\r\n                          className={classnames({\r\n                            'input-group-focus': emailFocus,\r\n                          })}\r\n                        >\r\n                          <InputGroupAddon addonType='prepend'>\r\n                            <InputGroupText>\r\n                              <i className='tim-icons icon-email-85' />\r\n                            </InputGroupText>\r\n                          </InputGroupAddon>\r\n                          <Input\r\n                            placeholder='Email'\r\n                            type='text'\r\n                            onFocus={(e) => setEmailFocus(true)}\r\n                            onBlur={(e) => setEmailFocus(false)}\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                          />\r\n                        </InputGroup>\r\n                        <InputGroup\r\n                          className={classnames({\r\n                            'input-group-focus': passwordFocus,\r\n                          })}\r\n                        >\r\n                          <InputGroupAddon addonType='prepend'>\r\n                            <InputGroupText>\r\n                              <i className='tim-icons icon-lock-circle' />\r\n                            </InputGroupText>\r\n                          </InputGroupAddon>\r\n                          <Input\r\n                            placeholder='Password'\r\n                            type='text'\r\n                            onFocus={(e) => setPasswordFocus(true)}\r\n                            onBlur={(e) => setPasswordFocus(false)}\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                          />\r\n                        </InputGroup>\r\n                      </Form>\r\n                    </CardBody>\r\n                    <CardFooter>\r\n                      <Button\r\n                        onClick={submitHandler}\r\n                        className='btn-round'\r\n                        color='primary'\r\n                        size='lg'\r\n                      >\r\n                        Login\r\n                      </Button>\r\n                    </CardFooter>\r\n                  </Card>\r\n                </Col>\r\n                <Col lg='6'>\r\n                  <h3 className='display-3 text-white'>\r\n                    Hybrid Scheduler <span className='text-white'></span>\r\n                  </h3>\r\n                  <p className='text-white mb-3'>\r\n                    Hybrid classes work in such a manner that half-strength\r\n                    would attend college/school and the same lecture would\r\n                    simultaneously be made available online for those attending\r\n                    lecture from their respective homes.\r\n                  </p>\r\n                  <div className='btn-wrapper'>\r\n                    <Link to='/register'>\r\n                      <Button color='primary'>Go to Register Page</Button>\r\n                    </Link>\r\n                  </div>\r\n                </Col>\r\n              </Row>\r\n            </Container>\r\n          </div>\r\n          );\r\n        </div>\r\n        <Footer />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Signin;\r\n","C:\\shivs\\MICROSOFT-ENGAGE-SCHEDULER\\frontend\\src\\components\\Booking.js",["101"],"import React, { useState, useEffect } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { Button, Container, Row, Col } from 'reactstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { storage } from 'firebase';\r\nimport { Progress } from 'reactstrap';\r\nimport { bookSlot, updateSlotByDate } from '../actions/slotActions';\r\n\r\nconst Booking = ({ match, history }) => {\r\n  const dispatch = useDispatch();\r\n  const bookingSlotState = useSelector((state) => state.bookingSlot);\r\n\r\n  const { error, data } = bookingSlotState;\r\n  const [redirectToRef, setRedirectToRef] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (error) {\r\n      alert(error);\r\n    }\r\n\r\n    if (data) {\r\n      alert('SLOT SUCCESSFULLY BOOKED');\r\n    }\r\n  }, [error, data]);\r\n\r\n  const [image, setImage] = useState(null);\r\n  const [url, setUrl] = useState('');\r\n  const [progress, setProgress] = useState(0);\r\n\r\n  const userLogin = useSelector((state) => state.userLogin);\r\n  const { userInfo } = userLogin;\r\n  const user = userInfo._id;\r\n\r\n  useEffect(() => {\r\n    if (!userInfo) {\r\n      history.push('/login');\r\n    }\r\n  }, [history, userInfo, user]);\r\n\r\n  const handlechange = (e) => {\r\n    if (e.target.files[0] != null) {\r\n      setImage(e.target.files[0]);\r\n    }\r\n  };\r\n\r\n  console.log(image);\r\n\r\n  const handleUpload = () => {\r\n    const uploadTask = storage.ref(`images/${image.name}`).put(image);\r\n    uploadTask.on(\r\n      'state_changed',\r\n      (snapshot) => {\r\n        const progress = Math.round(\r\n          (snapshot.bytesTransferred / snapshot.totalBytes) * 100\r\n        );\r\n        setProgress(progress);\r\n      },\r\n      (error) => {\r\n        console.log(error);\r\n      },\r\n      () => {\r\n        storage\r\n          .ref('images')\r\n          .child(image.name)\r\n          .getDownloadURL()\r\n          .then((url) => {\r\n            setUrl(url);\r\n          });\r\n      }\r\n    );\r\n  };\r\n\r\n  const updateSlot = () => {\r\n    if (data) {\r\n      dispatch(updateSlotByDate(match.params.date));\r\n    }\r\n  };\r\n\r\n  const submitDetails = (e) => {\r\n    e.preventDefault();\r\n    dispatch(bookSlot(user, url, match.params.date));\r\n    dispatch(updateSlotByDate(match.params.date));\r\n    updateSlot();\r\n  };\r\n\r\n  return (\r\n    <div className='section section-examples' data-background-color='black'>\r\n      {redirectToRef && <Redirect to='/calender' />}\r\n      <img\r\n        alt='...'\r\n        className='path'\r\n        src={require('assets/img/path1.png').default}\r\n      />\r\n      <div className='space-50' />\r\n\r\n      <Container>\r\n        <h1 className='text-center' style={{ marginBottom: '90px' }}>\r\n          Book slot for {match.params.date}\r\n        </h1>\r\n        <Row>\r\n          <Col sm='12'>\r\n            <h3>Upload Vaccination Certificate</h3>\r\n          </Col>\r\n          <Col sm='6' className='mb-3'>\r\n            {' '}\r\n            <input\r\n              className='mb-4'\r\n              type='file'\r\n              onChange={handlechange}\r\n              required\r\n            />\r\n            <Button\r\n              className='btn-round'\r\n              color='warning'\r\n              size='sm'\r\n              onClick={handleUpload}\r\n            >\r\n              Upload\r\n            </Button>\r\n            <small style={{ textAlign: 'left' }}>{url}</small>\r\n          </Col>\r\n          <br />\r\n          <Col sm='6' className='mb-3'>\r\n            <Progress value={progress} style={{ width: '50%' }} />{' '}\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row>\r\n          <Col sm='6'>\r\n            <h3>Date selected for attending offline classes:</h3>\r\n          </Col>\r\n          <Col sm='6'>\r\n            <p className='mt-2'>{match.params.date}</p>\r\n          </Col>\r\n        </Row>\r\n        <br />\r\n        <Button\r\n          className='btn-round'\r\n          color='primary'\r\n          size='lg'\r\n          onClick={submitDetails}\r\n        >\r\n          Submit\r\n        </Button>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Booking;\r\n","C:\\shivs\\MICROSOFT-ENGAGE-SCHEDULER\\frontend\\src\\components\\Calender.js",["102","103","104","105","106","107","108","109"],"import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Button, Container, Row, Col } from 'reactstrap';\r\nimport { Card, CardBody, CardText } from 'reactstrap';\r\nimport { getNumOfSlotByDate } from '../actions/slotActions';\r\nimport './Calender.js';\r\nimport DateCard from './DateCard';\r\nvar moment = require('moment');\r\n\r\nconst Calender = ({ history }) => {\r\n  const [today, setToday] = useState(moment());\r\n\r\n  const dispatch = useDispatch();\r\n  const bookingSlotState = useSelector((state) => state.bookingSlot);\r\n\r\n  const { error, data } = bookingSlotState;\r\n\r\n  useEffect(() => {\r\n    if (error) {\r\n      alert(error);\r\n    }\r\n\r\n    if (data) {\r\n      alert('SLOTS CREATED');\r\n    }\r\n  }, [error, data]);\r\n\r\n  const userLogin = useSelector((state) => state.userLogin);\r\n  const { userInfo } = userLogin;\r\n\r\n  useEffect(() => {\r\n    if (!userInfo) {\r\n      history.push('/login');\r\n    }\r\n  }, [history, userInfo]);\r\n\r\n  return (\r\n    <div className='section section-examples' data-background-color='black'>\r\n      <img\r\n        alt='...'\r\n        className='path'\r\n        src={require('assets/img/path1.png').default}\r\n      />\r\n      <div className='space-50' />\r\n      <Container className='text-center'>\r\n        <h1>Slot Booking</h1>\r\n        <Row>\r\n          <Col sm='2'>\r\n            <DateCard\r\n              date={today.format('dddd, MMMM, YYYY')}\r\n              slotDate={today.format('Do,MMMM,YYYY')}\r\n              day={today.format('Do')}\r\n              weekday={today.format('dddd')}\r\n            />\r\n          </Col>\r\n          <Col sm='2'>\r\n            <DateCard\r\n              date={today.add(1, 'days').format('dddd, MMMM, YYYY')}\r\n              slotDate={today.format('Do,MMMM,YYYY')}\r\n              day={today.format('Do')}\r\n              weekday={today.format('dddd')}\r\n            />\r\n          </Col>\r\n          <Col sm='2'>\r\n            <DateCard\r\n              date={today.add(1, 'days').format('dddd, MMMM, YYYY')}\r\n              slotDate={today.format('Do,MMMM,YYYY')}\r\n              day={today.format('Do')}\r\n              weekday={today.format('dddd')}\r\n            />\r\n          </Col>\r\n          <Col sm='2'>\r\n            <DateCard\r\n              date={today.add(1, 'days').format('dddd, MMMM, YYYY')}\r\n              slotDate={today.format('Do,MMMM,YYYY')}\r\n              day={today.format('Do')}\r\n              weekday={today.format('dddd')}\r\n            />\r\n          </Col>\r\n          <Col sm='2'>\r\n            <DateCard\r\n              date={today.add(1, 'days').format('dddd, MMMM, YYYY')}\r\n              slotDate={today.format('Do,MMMM,YYYY')}\r\n              day={today.format('Do')}\r\n              weekday={today.format('dddd')}\r\n            />\r\n          </Col>\r\n          <Col sm='2'>\r\n            <DateCard\r\n              date={today.add(1, 'days').format('dddd, MMMM, YYYY')}\r\n              slotDate={today.format('Do,MMMM,YYYY')}\r\n              day={today.format('Do')}\r\n              weekday={today.format('dddd')}\r\n            />\r\n          </Col>\r\n          <Col sm='2'>\r\n            <DateCard\r\n              date={today.add(1, 'days').format('dddd, MMMM, YYYY')}\r\n              slotDate={today.format('Do,MMMM,YYYY')}\r\n              day={today.format('Do')}\r\n              weekday={today.format('dddd')}\r\n            />\r\n          </Col>\r\n          <Col sm='2'>\r\n            <DateCard\r\n              date={today.add(1, 'days').format('dddd, MMMM, YYYY')}\r\n              slotDate={today.format('Do,MMMM,YYYY')}\r\n              day={today.format('Do')}\r\n              weekday={today.format('dddd')}\r\n            />\r\n          </Col>\r\n          <Col sm='2'>\r\n            <DateCard\r\n              date={today.add(1, 'days').format('dddd, MMMM, YYYY')}\r\n              slotDate={today.format('Do,MMMM,YYYY')}\r\n              day={today.format('Do')}\r\n              weekday={today.format('dddd')}\r\n            />\r\n          </Col>\r\n          <Col sm='2'>\r\n            <DateCard\r\n              date={today.add(1, 'days').format('dddd, MMMM, YYYY')}\r\n              slotDate={today.format('Do,MMMM,YYYY')}\r\n              day={today.format('Do')}\r\n              weekday={today.format('dddd')}\r\n            />\r\n          </Col>\r\n          <Col sm='2'>\r\n            <DateCard\r\n              date={today.add(1, 'days').format('dddd, MMMM, YYYY')}\r\n              slotDate={today.format('Do,MMMM,YYYY')}\r\n              day={today.format('Do')}\r\n              weekday={today.format('dddd')}\r\n            />\r\n          </Col>\r\n          <Col sm='2'>\r\n            <DateCard\r\n              date={today.add(1, 'days').format('dddd, MMMM, YYYY')}\r\n              slotDate={today.format('Do,MMMM,YYYY')}\r\n              day={today.format('Do')}\r\n              weekday={today.format('dddd')}\r\n            />\r\n          </Col>\r\n          <small>{today.subtract(11, 'days').format('Do')}</small>\r\n        </Row>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Calender;\r\n","C:\\shivs\\MICROSOFT-ENGAGE-SCHEDULER\\frontend\\src\\views\\Index.js",[],"C:\\shivs\\MICROSOFT-ENGAGE-SCHEDULER\\frontend\\src\\store.js",[],"C:\\shivs\\MICROSOFT-ENGAGE-SCHEDULER\\frontend\\src\\components\\GetDetailsOfSlot.js",["110","111","112","113"],"import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Button, Container, Row, Col, Input, Label } from 'reactstrap';\r\nimport { Card, CardBody, CardText } from 'reactstrap';\r\nimport DatePicker from 'react-date-picker';\r\nimport { getSlotBookingByDate } from '../actions/slotActions';\r\nimport './Calender.css';\r\nimport ListOfStudents from './ListOfStudents';\r\nvar moment = require('moment');\r\n\r\nconst GetDetailsOfSlot = ({ history }) => {\r\n  const [value, onChange] = useState(new Date());\r\n  const [slotList, setSlotList] = useState([]);\r\n\r\n  const dispatch = useDispatch();\r\n  const bookingList = useSelector((state) => state.listSlotBookingByDate);\r\n\r\n  const { slots, loading } = bookingList;\r\n\r\n  useEffect(() => {\r\n    setSlotList({ ...slotList, slots });\r\n  }, [slots, loading]);\r\n\r\n  const userLogin = useSelector((state) => state.userLogin);\r\n  const { userInfo } = userLogin;\r\n\r\n  useEffect(() => {\r\n    if (!userInfo.isTeacher) {\r\n      history.push('/login');\r\n    }\r\n  }, [history, userInfo]);\r\n\r\n  const getListSlots = (e) => {\r\n    e.preventDefault();\r\n    dispatch(getSlotBookingByDate(moment(value).format('Do,MMMM,YYYY')));\r\n  };\r\n\r\n  return (\r\n    <div className='section section-examples' data-background-color='black'>\r\n      <img\r\n        alt='...'\r\n        className='path'\r\n        src={require('assets/img/path1.png').default}\r\n      />\r\n      <div className='space-50' />\r\n      <Container className='text-center'>\r\n        <h1>Get List Of Students</h1>\r\n        <Row>\r\n          <Card className='box-num-slots neutral'>\r\n            <CardBody className='box-num-slots mt-3'>\r\n              <CardText>\r\n                <h2>{moment(value).format('Do,MMMM,YYYY')}</h2>\r\n                <h4>{moment(value).format('dddd')}</h4>\r\n              </CardText>\r\n              <Row>\r\n                <Col sm='12' className='box-num-slots mb-5 mt-3 '>\r\n                  <DatePicker onChange={onChange} value={value} />\r\n                </Col>\r\n              </Row>\r\n            </CardBody>\r\n          </Card>\r\n        </Row>\r\n        <Button\r\n          className='btn-round'\r\n          color='primary'\r\n          size='lg'\r\n          onClick={getListSlots}\r\n        >\r\n          Get List\r\n        </Button>\r\n\r\n        {/* {loading ? 'loading' : TableList(slotList)} */}\r\n        {/* {slots && TableList(slots)}\r\n        {JSON.stringify(slots)} */}\r\n        {/* {loading\r\n          ? 'loading'\r\n          : slotList && slotList.length > 0\r\n          ? TableList(slots)\r\n          : 'no record found'} */}\r\n        {loading ? 'loading' : <ListOfStudents slots={slots} />}\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GetDetailsOfSlot;\r\n","C:\\shivs\\MICROSOFT-ENGAGE-SCHEDULER\\frontend\\src\\components\\NumOfSlotSetting.js",["114","115","116","117","118","119"],"import React, { useState, useEffect } from 'react';\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Button, Container, Row, Col, Input, Label } from 'reactstrap';\r\nimport { Card, CardBody, CardText } from 'reactstrap';\r\nimport DatePicker from 'react-date-picker';\r\nimport { createSlot } from '../actions/slotActions';\r\nimport './Calender.css';\r\nvar moment = require('moment');\r\n\r\nconst NumOfSlotSetting = ({ history }) => {\r\n  const dispatch = useDispatch();\r\n  const bookingSlotState = useSelector((state) => state.slotCreate);\r\n\r\n  const getnumslots = (data) => {\r\n    return fetch(`/api/slot/booking/date`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-type': 'application/json',\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n      body: JSON.stringify(data),\r\n    })\r\n      .then((response) => {\r\n        return response.json();\r\n      })\r\n      .catch((err) => {\r\n        return err;\r\n      });\r\n  };\r\n\r\n  const { error, slotCreate } = bookingSlotState;\r\n\r\n  useEffect(() => {\r\n    if (error) {\r\n      alert(error);\r\n    }\r\n\r\n    if (slotCreate) {\r\n      alert('SLOTS CREATED');\r\n    }\r\n  }, [error, slotCreate]);\r\n\r\n  const [numOfSlot, setnumOfSlot] = useState();\r\n\r\n  const userLogin = useSelector((state) => state.userLogin);\r\n  const { userInfo } = userLogin;\r\n\r\n  useEffect(() => {\r\n    if (!userInfo.isTeacher) {\r\n      history.push('/');\r\n    }\r\n  }, [history, userInfo]);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    dispatch(createSlot(numOfSlot, moment(value).format('Do,MMMM,YYYY')));\r\n\r\n    return slotCreate && <Redirect to='/' />;\r\n  };\r\n\r\n  const [value, onChange] = useState(new Date());\r\n  console.log(value);\r\n\r\n  const handleChange = (e) => {\r\n    setnumOfSlot(e.target.value);\r\n  };\r\n\r\n  const [num, setNum] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const slotDate = moment(value).format('Do,MMMM,YYYY');\r\n    getnumslots({ slotDate }).then((response) => {\r\n      if (response == 'Entry Not Found') {\r\n        setNum(-1);\r\n      } else {\r\n        setNum(response.numOfSlot);\r\n      }\r\n    });\r\n  }, [value]);\r\n\r\n  return (\r\n    <div className='section section-examples'>\r\n      <img\r\n        alt='...'\r\n        className='path'\r\n        src={require('assets/img/path1.png').default}\r\n      />\r\n      <div className='space-50' />\r\n      <Container className='text-center'>\r\n        <h1>Create Slots</h1>\r\n        <Row>\r\n          <Card className='box-num-slots neutral'>\r\n            <CardBody className='box-num-slots mt-3'>\r\n              <CardText>\r\n                <h2>\r\n                  {moment(value).format('Do,MMMM,YYYY')},{' '}\r\n                  {moment(value).format('dddd')}\r\n                </h2>\r\n              </CardText>\r\n              <Row>\r\n                <Col sm='12' className='box-num-slots mb-5 mt-3 '>\r\n                  <DatePicker onChange={onChange} value={value} />\r\n                  <h4></h4>\r\n                  {num == -1 ? (\r\n                    <h4>No slots allocated till now</h4>\r\n                  ) : (\r\n                    <h4>Number Of slots allocated: {num}</h4>\r\n                  )}\r\n                </Col>\r\n                <Col sm='6' className='box-num-slots'>\r\n                  <h3>Enter number of slots to create:</h3>\r\n                </Col>\r\n                <Col sm='6' className='box-num-slots'>\r\n                  <Input\r\n                    style={{ borderColor: '#ffffff' }}\r\n                    value={numOfSlot}\r\n                    className='neutral'\r\n                    onChange={handleChange}\r\n                    type='number'\r\n                  ></Input>\r\n                </Col>\r\n              </Row>\r\n            </CardBody>\r\n          </Card>\r\n        </Row>\r\n        <Button\r\n          className='btn-round'\r\n          color='primary'\r\n          size='lg'\r\n          onClick={handleSubmit}\r\n        >\r\n          Submit\r\n        </Button>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NumOfSlotSetting;\r\n","C:\\shivs\\MICROSOFT-ENGAGE-SCHEDULER\\frontend\\src\\components\\Navbars\\IndexNavbar.js",["120","121"],"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Redirect } from 'react-router';\nimport {\n  Button,\n  Collapse,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  UncontrolledDropdown,\n  NavbarBrand,\n  Navbar,\n  NavItem,\n  NavLink,\n  Nav,\n  Container,\n  Row,\n  Col,\n  UncontrolledTooltip,\n} from 'reactstrap';\nimport { logout } from '../../actions/userActions';\n\nexport default function IndexNavbar() {\n  const dispatch = useDispatch();\n\n  const userLogin = useSelector((state) => state.userLogin);\n  const { userInfo } = userLogin;\n\n  const logoutHandler = () => {\n    dispatch(logout());\n    return !userInfo && <Redirect to='/' />;\n  };\n\n  const [collapseOpen, setCollapseOpen] = React.useState(false);\n  const [collapseOut, setCollapseOut] = React.useState('');\n  const [color, setColor] = React.useState('navbar-transparent');\n  React.useEffect(() => {\n    window.addEventListener('scroll', changeColor);\n    return function cleanup() {\n      window.removeEventListener('scroll', changeColor);\n    };\n  }, []);\n  const changeColor = () => {\n    if (\n      document.documentElement.scrollTop > 99 ||\n      document.body.scrollTop > 99\n    ) {\n      setColor('bg-default');\n    } else if (\n      document.documentElement.scrollTop < 100 ||\n      document.body.scrollTop < 100\n    ) {\n      setColor('navbar-transparent');\n    }\n  };\n  const toggleCollapse = () => {\n    document.documentElement.classList.toggle('nav-open');\n    setCollapseOpen(!collapseOpen);\n  };\n  const onCollapseExiting = () => {\n    setCollapseOut('collapsing-out');\n  };\n  const onCollapseExited = () => {\n    setCollapseOut('');\n  };\n  const scrollToDownload = () => {\n    document\n      .getElementById('download-section')\n      .scrollIntoView({ behavior: 'smooth' });\n  };\n\n  return (\n    <Navbar className={'fixed-top ' + color} color-on-scroll='100' expand='lg'>\n      <Container>\n        <div className='navbar-translate'>\n          <NavbarBrand to='/' tag={Link} id='navbar-brand'>\n            <span>Hybrid Scheduler </span>\n          </NavbarBrand>\n          <UncontrolledTooltip placement='bottom' target='navbar-brand'>\n            Made with love ❤ by Aradhna\n          </UncontrolledTooltip>\n          <button\n            aria-expanded={collapseOpen}\n            className='navbar-toggler navbar-toggler'\n            onClick={toggleCollapse}\n          >\n            <span className='navbar-toggler-bar bar1' />\n            <span className='navbar-toggler-bar bar2' />\n            <span className='navbar-toggler-bar bar3' />\n          </button>\n        </div>\n        <Collapse\n          className={'justify-content-end ' + collapseOut}\n          navbar\n          isOpen={collapseOpen}\n          onExiting={onCollapseExiting}\n          onExited={onCollapseExited}\n        >\n          <div className='navbar-collapse-header'>\n            <Row>\n              <Col className='collapse-brand' xs='6'>\n                <a href='#pablo' onClick={(e) => e.preventDefault()}>\n                  Hybrid Scheduler\n                </a>\n              </Col>\n              <Col className='collapse-close text-right' xs='6'>\n                <button\n                  aria-expanded={collapseOpen}\n                  className='navbar-toggler'\n                  onClick={toggleCollapse}\n                >\n                  <i className='tim-icons icon-simple-remove' />\n                </button>\n              </Col>\n            </Row>\n          </div>\n          <Nav navbar>\n            <UncontrolledDropdown nav>\n              <DropdownToggle\n                caret\n                color='default'\n                data-toggle='dropdown'\n                href='#pablo'\n                nav\n                onClick={(e) => e.preventDefault()}\n              >\n                <i className='fa fa-cogs d-lg-none d-xl-none' />\n                Book Slot\n              </DropdownToggle>\n              <DropdownMenu className='dropdown-with-icons'>\n                <DropdownItem href='https://demos.creative-tim.com/blk-design-system-react/#/documentation/overview'>\n                  <i className='tim-icons icon-paper' />a\n                </DropdownItem>\n                <DropdownItem tag={Link} to='/register-page'>\n                  <i className='tim-icons icon-bullet-list-67' />b\n                </DropdownItem>\n                <DropdownItem tag={Link} to='/landing-page'>\n                  <i className='tim-icons icon-image-02' />c\n                </DropdownItem>\n                <DropdownItem tag={Link} to='/profile-page'>\n                  <i className='tim-icons icon-single-02' />d\n                </DropdownItem>\n              </DropdownMenu>\n            </UncontrolledDropdown>\n\n            {!userInfo && (\n              <NavItem>\n                <Link to='/register'>\n                  <Button\n                    className='nav-link d-sm-block'\n                    color='default'\n                    style={{ padding: '10px', marginBottom: '10px' }}\n                  >\n                    Signup\n                  </Button>\n                </Link>\n              </NavItem>\n            )}\n            {userInfo && (\n              <NavItem>\n                <Button\n                  className='nav-link d-sm-block'\n                  style={{ padding: '10px' }}\n                  color='success'\n                >\n                  Hi, {userInfo.name}\n                </Button>\n              </NavItem>\n            )}\n            {userInfo && userInfo.isTeacher && (\n              <NavItem>\n                <Link to='/setnumslots'>\n                  <Button\n                    className='nav-link d-sm-block'\n                    color='default'\n                    style={{ padding: '10px', marginBottom: '10px' }}\n                  >\n                    Set Num Slots\n                  </Button>\n                </Link>\n              </NavItem>\n            )}\n            {!userInfo && (\n              <NavItem>\n                <Link to='/login'>\n                  <Button\n                    className='nav-link d-sm-block'\n                    style={{ padding: '10px' }}\n                    color='default'\n                  >\n                    Signin\n                  </Button>\n                </Link>\n              </NavItem>\n            )}\n            {userInfo && (\n              <NavItem>\n                <Button\n                  className='nav-link d-sm-block'\n                  style={{ padding: '10px' }}\n                  color='default'\n                  onClick={logoutHandler}\n                >\n                  Logout\n                </Button>\n              </NavItem>\n            )}\n            {userInfo && (\n              <NavItem>\n                <Button\n                  className='nav-link d-sm-block'\n                  style={{ padding: '10px' }}\n                  color='default'\n                  href='/calender'\n                >\n                  Calender\n                </Button>\n              </NavItem>\n            )}\n            {userInfo && (\n              <NavItem>\n                <Button\n                  className='nav-link d-sm-block'\n                  style={{ padding: '10px' }}\n                  color='default'\n                  href='/getnumslots'\n                >\n                  Get list\n                </Button>\n              </NavItem>\n            )}\n          </Nav>\n        </Collapse>\n      </Container>\n    </Navbar>\n  );\n}\n","C:\\shivs\\MICROSOFT-ENGAGE-SCHEDULER\\frontend\\src\\components\\DateCard.js",["122","123","124","125","126","127","128","129","130","131"],"import React, { useEffect, useState } from 'react';\r\nimport { Card, CardBody, CardText } from 'reactstrap';\r\nimport { Button } from 'reactstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getNumOfSlotByDate } from '../actions/slotActions';\r\nvar moment = require('moment');\r\n\r\nconst checkdis = (str) => {\r\n  if (str == 'Sunday') {\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nconst DateCard = ({ date, slotDate, day, weekday }) => {\r\n  const dispatch = useDispatch();\r\n  const numOfSlots = useSelector((state) => state.getNumOfSlotsByDate);\r\n\r\n  const userLogin = useSelector((state) => state.userLogin);\r\n  const { loading, userInfo, error } = userLogin;\r\n\r\n  const getnumslots = (data) => {\r\n    return fetch(`/api/slot/booking/date`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-type': 'application/json',\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n      body: JSON.stringify(data),\r\n    })\r\n      .then((response) => {\r\n        // console.log(response);\r\n        // console.log(response.json());\r\n        return response.json();\r\n      })\r\n      .catch((err) => {\r\n        return err;\r\n      });\r\n  };\r\n\r\n  const [value, setValue] = useState(0);\r\n\r\n  const { slot } = numOfSlots;\r\n\r\n  useEffect(() => {\r\n    getnumslots({ slotDate }).then((response) => {\r\n      if (response == 'Entry Not Found') {\r\n      } else {\r\n        setValue(response.numOfSlotRemaining);\r\n      }\r\n    });\r\n\r\n    // dispatch(getNumOfSlotByDate(slotDate));\r\n    // if (slot) {\r\n    //   setValue(slot.numOfSlot);\r\n    // }\r\n  }, [date]);\r\n\r\n  return (\r\n    <Card>\r\n      <CardBody>\r\n        <CardText>\r\n          <h2>{day}</h2>\r\n          <h4>{date}</h4>\r\n        </CardText>\r\n        <Button\r\n          disabled={value == 0 || checkdis(weekday)}\r\n          color='primary'\r\n          href={`/booking/${slotDate}`}\r\n          style={{ padding: '13px 20px 0px 20px' }}\r\n        >\r\n          Book slot{' '}\r\n          <span\r\n            style={{\r\n              backgroundColor: '#5603ad',\r\n              borderRadius: '5px 20px 5px',\r\n            }}\r\n            className='mt-2'\r\n          >\r\n            {value}\r\n          </span>\r\n          {/* <span className='numberCircle' style={{ backgroundColor: '#5603ad' }}>\r\n            \r\n          </span> */}\r\n          <br />\r\n        </Button>\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default DateCard;\r\n","C:\\shivs\\MICROSOFT-ENGAGE-SCHEDULER\\frontend\\src\\actions\\slotActions.js",[],"C:\\shivs\\MICROSOFT-ENGAGE-SCHEDULER\\frontend\\src\\actions\\userActions.js",[],"C:\\shivs\\MICROSOFT-ENGAGE-SCHEDULER\\frontend\\src\\components\\Footer\\Footer.js",["132","133","134","135","136","137"],"import React from 'react';\nimport { Link } from 'react-router-dom';\n// reactstrap components\nimport {\n  Button,\n  NavItem,\n  NavLink,\n  Nav,\n  Container,\n  Row,\n  Col,\n  UncontrolledTooltip,\n} from 'reactstrap';\n\nexport default function Footer() {\n  return (\n    <footer className='footer' style={{ padding: '10px 0' }}>\n      <Container>\n        <Row>\n          <Col className='text-center py-3'>\n            Copyright &copy; {new Date().getFullYear()}, Made with 💖 by Aradhna\n          </Col>\n        </Row>\n      </Container>\n    </footer>\n  );\n}\n","C:\\shivs\\MICROSOFT-ENGAGE-SCHEDULER\\frontend\\src\\reducers\\userReducers.js",[],"C:\\shivs\\MICROSOFT-ENGAGE-SCHEDULER\\frontend\\src\\reducers\\slotReducers.js",[],"C:\\shivs\\MICROSOFT-ENGAGE-SCHEDULER\\frontend\\src\\components\\ListOfStudents.js",[],"C:\\shivs\\MICROSOFT-ENGAGE-SCHEDULER\\frontend\\src\\constants.js",[],"C:\\shivs\\MICROSOFT-ENGAGE-SCHEDULER\\frontend\\src\\components\\PageHeader\\PageHeader.js",[],"C:\\shivs\\MICROSOFT-ENGAGE-SCHEDULER\\frontend\\src\\firebase\\index.js",[],{"ruleId":"138","severity":1,"message":"139","line":14,"column":3,"nodeType":"140","messageId":"141","endLine":14,"endColumn":8},{"ruleId":"138","severity":1,"message":"142","line":15,"column":3,"nodeType":"140","messageId":"141","endLine":15,"endColumn":12},{"ruleId":"138","severity":1,"message":"143","line":46,"column":11,"nodeType":"140","messageId":"141","endLine":46,"endColumn":18},{"ruleId":"138","severity":1,"message":"144","line":46,"column":30,"nodeType":"140","messageId":"141","endLine":46,"endColumn":35},{"ruleId":"138","severity":1,"message":"139","line":14,"column":3,"nodeType":"140","messageId":"141","endLine":14,"endColumn":8},{"ruleId":"138","severity":1,"message":"142","line":15,"column":3,"nodeType":"140","messageId":"141","endLine":15,"endColumn":12},{"ruleId":"138","severity":1,"message":"145","line":35,"column":10,"nodeType":"140","messageId":"141","endLine":35,"endColumn":23},{"ruleId":"138","severity":1,"message":"146","line":35,"column":25,"nodeType":"140","messageId":"141","endLine":35,"endColumn":41},{"ruleId":"138","severity":1,"message":"143","line":44,"column":11,"nodeType":"140","messageId":"141","endLine":44,"endColumn":18},{"ruleId":"138","severity":1,"message":"144","line":44,"column":30,"nodeType":"140","messageId":"141","endLine":44,"endColumn":35},{"ruleId":"138","severity":1,"message":"147","line":14,"column":25,"nodeType":"140","messageId":"141","endLine":14,"endColumn":41},{"ruleId":"138","severity":1,"message":"148","line":2,"column":10,"nodeType":"140","messageId":"141","endLine":2,"endColumn":14},{"ruleId":"138","severity":1,"message":"149","line":4,"column":10,"nodeType":"140","messageId":"141","endLine":4,"endColumn":16},{"ruleId":"138","severity":1,"message":"150","line":5,"column":10,"nodeType":"140","messageId":"141","endLine":5,"endColumn":14},{"ruleId":"138","severity":1,"message":"151","line":5,"column":16,"nodeType":"140","messageId":"141","endLine":5,"endColumn":24},{"ruleId":"138","severity":1,"message":"152","line":5,"column":26,"nodeType":"140","messageId":"141","endLine":5,"endColumn":34},{"ruleId":"138","severity":1,"message":"153","line":6,"column":10,"nodeType":"140","messageId":"141","endLine":6,"endColumn":28},{"ruleId":"138","severity":1,"message":"154","line":12,"column":17,"nodeType":"140","messageId":"141","endLine":12,"endColumn":25},{"ruleId":"138","severity":1,"message":"155","line":14,"column":9,"nodeType":"140","messageId":"141","endLine":14,"endColumn":17},{"ruleId":"138","severity":1,"message":"148","line":2,"column":10,"nodeType":"140","messageId":"141","endLine":2,"endColumn":14},{"ruleId":"138","severity":1,"message":"156","line":4,"column":39,"nodeType":"140","messageId":"141","endLine":4,"endColumn":44},{"ruleId":"138","severity":1,"message":"139","line":4,"column":46,"nodeType":"140","messageId":"141","endLine":4,"endColumn":51},{"ruleId":"157","severity":1,"message":"158","line":23,"column":6,"nodeType":"159","endLine":23,"endColumn":22,"suggestions":"160"},{"ruleId":"138","severity":1,"message":"148","line":2,"column":10,"nodeType":"140","messageId":"141","endLine":2,"endColumn":14},{"ruleId":"138","severity":1,"message":"139","line":4,"column":46,"nodeType":"140","messageId":"141","endLine":4,"endColumn":51},{"ruleId":"161","severity":1,"message":"162","line":74,"column":20,"nodeType":"163","messageId":"164","endLine":74,"endColumn":22},{"ruleId":"157","severity":1,"message":"165","line":80,"column":6,"nodeType":"159","endLine":80,"endColumn":13,"suggestions":"166"},{"ruleId":"167","severity":1,"message":"168","line":104,"column":19,"nodeType":"169","endLine":104,"endColumn":23},{"ruleId":"161","severity":1,"message":"162","line":105,"column":24,"nodeType":"163","messageId":"164","endLine":105,"endColumn":26},{"ruleId":"138","severity":1,"message":"170","line":15,"column":3,"nodeType":"140","messageId":"141","endLine":15,"endColumn":10},{"ruleId":"138","severity":1,"message":"171","line":67,"column":9,"nodeType":"140","messageId":"141","endLine":67,"endColumn":25},{"ruleId":"138","severity":1,"message":"153","line":5,"column":10,"nodeType":"140","messageId":"141","endLine":5,"endColumn":28},{"ruleId":"138","severity":1,"message":"172","line":6,"column":5,"nodeType":"140","messageId":"141","endLine":6,"endColumn":11},{"ruleId":"161","severity":1,"message":"162","line":9,"column":11,"nodeType":"163","messageId":"164","endLine":9,"endColumn":13},{"ruleId":"138","severity":1,"message":"155","line":16,"column":9,"nodeType":"140","messageId":"141","endLine":16,"endColumn":17},{"ruleId":"138","severity":1,"message":"143","line":20,"column":11,"nodeType":"140","messageId":"141","endLine":20,"endColumn":18},{"ruleId":"138","severity":1,"message":"144","line":20,"column":30,"nodeType":"140","messageId":"141","endLine":20,"endColumn":35},{"ruleId":"138","severity":1,"message":"173","line":43,"column":11,"nodeType":"140","messageId":"141","endLine":43,"endColumn":15},{"ruleId":"161","severity":1,"message":"162","line":47,"column":20,"nodeType":"163","messageId":"164","endLine":47,"endColumn":22},{"ruleId":"157","severity":1,"message":"174","line":57,"column":6,"nodeType":"159","endLine":57,"endColumn":12,"suggestions":"175"},{"ruleId":"161","severity":1,"message":"162","line":67,"column":27,"nodeType":"163","messageId":"164","endLine":67,"endColumn":29},{"ruleId":"138","severity":1,"message":"148","line":2,"column":10,"nodeType":"140","messageId":"141","endLine":2,"endColumn":14},{"ruleId":"138","severity":1,"message":"149","line":5,"column":3,"nodeType":"140","messageId":"141","endLine":5,"endColumn":9},{"ruleId":"138","severity":1,"message":"176","line":6,"column":3,"nodeType":"140","messageId":"141","endLine":6,"endColumn":10},{"ruleId":"138","severity":1,"message":"170","line":7,"column":3,"nodeType":"140","messageId":"141","endLine":7,"endColumn":10},{"ruleId":"138","severity":1,"message":"177","line":8,"column":3,"nodeType":"140","messageId":"141","endLine":8,"endColumn":6},{"ruleId":"138","severity":1,"message":"178","line":12,"column":3,"nodeType":"140","messageId":"141","endLine":12,"endColumn":22},"no-unused-vars","'Label' is defined but never used.","Identifier","unusedVar","'FormGroup' is defined but never used.","'loading' is assigned a value but never used.","'error' is assigned a value but never used.","'fullNameFocus' is assigned a value but never used.","'setFullNameFocus' is assigned a value but never used.","'setRedirectToRef' is assigned a value but never used.","'Link' is defined but never used.","'Button' is defined but never used.","'Card' is defined but never used.","'CardBody' is defined but never used.","'CardText' is defined but never used.","'getNumOfSlotByDate' is defined but never used.","'setToday' is assigned a value but never used.","'dispatch' is assigned a value but never used.","'Input' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'slotList'. Either include it or remove the dependency array. You can also do a functional update 'setSlotList(s => ...)' if you only need 'slotList' in the 'setSlotList' call.","ArrayExpression",["179"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'getnumslots'. Either include it or remove the dependency array.",["180"],"jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","'NavLink' is defined but never used.","'scrollToDownload' is assigned a value but never used.","'moment' is assigned a value but never used.","'slot' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getnumslots' and 'slotDate'. Either include them or remove the dependency array.",["181"],"'NavItem' is defined but never used.","'Nav' is defined but never used.","'UncontrolledTooltip' is defined but never used.",{"desc":"182","fix":"183"},{"desc":"184","fix":"185"},{"desc":"186","fix":"187"},"Update the dependencies array to be: [slots, loading, slotList]",{"range":"188","text":"189"},"Update the dependencies array to be: [getnumslots, value]",{"range":"190","text":"191"},"Update the dependencies array to be: [date, getnumslots, slotDate]",{"range":"192","text":"193"},[872,888],"[slots, loading, slotList]",[2148,2155],"[getnumslots, value]",[1569,1575],"[date, getnumslots, slotDate]"]